import { LineEdit , HorizontalBox, ScrollView, VerticalBox} from "std-widgets.slint";

enum Author {
    User,
    Ollama,
}

struct Message {
    text: string,
    author: Author,
}

component HorizontalSpacer inherits HorizontalBox {
    in property <bool> left;
    in property <length> space: 4px;

    padding: 3px;
    spacing: 0px;

    alignment: left ? LayoutAlignment.start : LayoutAlignment.end;

    Rectangle {
        width: left ? root.space : 0px;
    }


    Rectangle {
        horizontal-stretch: 1;
        @children
    }

    Rectangle {
        width: left ? 0px : root.space;
    }

}

component MessageComponent inherits Rectangle {
    in property <string> text;
    in property <Author> author;

    property <bool> is-user: author == Author.User;

    HorizontalBox {
        width: root.width;
        padding: 5px;

        Rectangle {
            horizontal-stretch: root.is-user ? 1 : 0;
        }

        VerticalBox {
            padding: 0px;
            spacing: 0px;
            
            Rectangle {
                border-radius: 5px;
                max-width: 300px;
                background: root.is-user ? #0a7cff : #ccc;
        
                HorizontalBox {
                    
                    content:=Text {
                        text: root.text;
                        wrap: TextWrap.word-wrap;
                        font-size: 18px;
                        color: root.is-user ? #fff : #000;
                        horizontal-alignment: root.is-user ? TextHorizontalAlignment.right : TextHorizontalAlignment.left;
                    }
                }
            }
            HorizontalSpacer {
                z: -1;
                padding-top: -1px;
                left: !root.is-user;
                Path {
                    commands: root.is-user ? "M 400 200 L 300 200 L 300 300 L 400 400 Z" : "M 400 200 L 300 200 L 300 400 L 400 300 Z" ;
                    fill: root.is-user ? #0a7cff : #ccc;
                    height: 30px;
                    width: 30px;
                }
            }
        }

        Rectangle {
            horizontal-stretch: root.is-user ? 0 : 1;
        }
    }
}



export component MainWindow inherits Window {
    title: "Hello World";
    width: 500px;
    height: 1200px;

    callback user-input-accepted(string);

    // property <[Message]> test-data: [
    //     { text: "Hello my guys what's up in the world today?", author: Author.Ollama },
    //     { text: "World", author: Author.User },
    //     { text: "Hello", author: Author.Ollama },
    //     { text: "World", author: Author.User },
    //     { text: "Hello", author: Author.Ollama },
    //     { text: "World", author: Author.User },
    //     { text: "Hello", author: Author.Ollama },
    //     { text: "World", author: Author.User },
    //     { text: "Hello", author: Author.Ollama },
    //     { text: "World", author: Author.User },
    //     { text: "Hello", author: Author.Ollama },
    //     { text: "World", author: Author.User },
    //     { text: "Hello", author: Author.Ollama },
    //     { text: "World", author: Author.User },
    //     { text: "Hello", author: Author.Ollama },
    //     { text: "World", author: Author.User },
    // ];

    in-out property <[Message]> messages;//: root.test-data;
    

    Rectangle {
        width: parent.width;
        height: parent.height;
        background: #000;
    }

    VerticalBox { 
        ScrollView {
            width: root.width;
            height: root.height - 50px;
            VerticalLayout {
                spacing: 10px;
                padding-bottom: 10px;
                alignment: end;
                
                for message in root.messages: MessageComponent {
                    text: message.text;
                    author: message.author;
                }
            }
        }



        Rectangle {
            background: #fff;
            HorizontalBox {
                TextInput {
                    text: "";
                    font-size: 14px;
        
                    accepted => {
                        user-input-accepted(self.text);
                        self.text = "";
                    }
                }
            }
        }
    }
}